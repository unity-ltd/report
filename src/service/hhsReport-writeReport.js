'use strict';
import { existsSync } from 'fs';
import { resolve } from 'path';
import { think } from 'thinkjs';
import moment from 'moment';

export default class extends think.Service {
	async writeReport(docx, {account, house_data, task}) {
		var header = docx.getHeader().createP();
		header.options.align = 'center';
		header.addText('This report is generated by AZ Maintenance Ltd');
    // console.log('header.addText');

		const jsonContent = JSON.parse(task.result);

		var pObj = docx.createP({ align: 'left' });
		pObj.addText(moment(task.timestamp*1000).format('DD/MMM/YYYY'));

		var pObj = docx.createP({ align: 'right' });
		let logo = resolve(think.ROOT_PATH + '/src/static/image', 'hhs_logo.jpg');
		pObj.addImage(logo, { cx: 200, cy: 100 });
		pObj.addLineBreak();
		pObj.addText('10 Electra Place, Wigram Christchurch 8042');
		pObj.addLineBreak();
		pObj.addText('TEL：021 163 9397');
		pObj.addLineBreak();
		pObj.addText('GST No.129265229', { bold: true });
		pObj.addLineBreak();

		var pObj = docx.createP({ align: 'left' });
		pObj.addText('Property address: ', { bold: true, font_face: 'Calibri', font_size: 15 });
		pObj.addText(this._addressForm(house_data), {
			bold: false,
			font_face: 'Calibri',
			font_size: 15,
		});

		// 设置文档首页logo

		pObj = docx.createP({ backline: 'D0F0D0', font_face: 'Calibri', font_size: 11 });
		pObj.addText(`The compliance statement is an addition to tenancy agreements that provides
detailed information about how a property meets the healthy homes standards.
The healthy homes standards build on existing information requirements for tenancy agreements and record keeping.
The healthy homes standards became law on 1 July 2021.`);

		// Healthy Homes Standards Statement
		var pObj = docx.createP();
		pObj.addText('Healthy Homes Standards Statement', { bold: true, font_face: 'Calibri', font_size: 22 });

    // console.log('Healthy Homes Standards Statement');
    this._addSummary(docx, jsonContent, '')
    // console.log('this._addSummary');

    jsonContent.forEach(async (section) => {
			await this._addSection(docx, account, section, task);
		});

    // console.log('jsonContent.forEach');

    docx.addPageBreak()
		var pObj = docx.createP();
		pObj.addText(
			'Disclaimer: This report was undertaken by the agent for the owner of the property' +
				' should not be considered as a licensed building report or a licensed pest inspection'
		);

    const signature = resolve(think.ROOT_PATH + '/src/static/image', 'hhs_signature.jpg');
		var pObj = docx.createP();
		var pObj = docx.createP();
		pObj.addText('INSPECTOR:                                                          Date: '+ moment(task.timestamp*1000).format('DD/MMM/YYYY'));
		var pObj = docx.createP();
		pObj.addImage(signature, { cx: 160, cy: 80 });
    // console.log('DONE');
	}

	_addressForm(house_data) {
		if (!house_data.street) {
			return '';
		}
		return house_data.unit
			? `${house_data.unit}-${house_data.num} ${house_data.street} ${house_data.suburb} ${house_data.city}`
			: `${house_data.num} ${house_data.street} ${house_data.suburb} ${house_data.city}`;
	}

	_addSummary(docx, jsonContent, hhsNote) {
		var pObj = docx.createP();
		pObj.addText('Summary', { bold: true, font_face: 'Calibri', font_size: 14 });

    const passed = [], failed = [];

    for (let section of jsonContent) {
			const bIssues = section.components.some((component) => component.reportIssues);
			if (bIssues) failed.push(section.title);
			else passed.push(section.title);
		};

		var pObj = docx.createP();
		if (passed.length > 0) {
			pObj.addText(passed.join(', ') + ' comply with the standards.  ', { color: 'navy' });
		}
		if (failed.length > 0) {
			pObj.addText(`There are issues on ${failed.join(', ')}.  `, { color: 'red' });
		}
		if (hhsNote) {
			pObj.addText(hhsNote, { color: 'red' });
		}
		var pObj = docx.createP();
	}

	async _addSection(docx, account, section, task) {
    const pathHelper = think.service('pathHelper');
		var pObj = docx.createP({
			backline: 'D0F0D0',
			font_face: 'Calibri',
			bold: true,
			font_size: 20,
			textAlignment: 'center',
		});
		pObj.addText(section.title, { font_face: 'Calibri', bold: true, font_size: 14 });
		section.components.forEach(async (component) => {
			var pObj = docx.createP();
			pObj.addText(component.statement, { font_face: 'Calibri', bold: false, font_size: 12, italic: true });
			let previousAnswer = '';
			component.requiries.forEach((requiry) => {
				if (requiry.answer) {
					if (!requiry.previousMatched || requiry.previousMatched == previousAnswer) {
						var pObj = docx.createP({ font_face: 'Calibri', bold: false, font_size: 10 });
						pObj.addText(requiry.question + ' ');
						// var color = requiry.candicates && requiry.candicates[0] != requiry.answer ? 'red' : 'navy';
						pObj.addText(requiry.answer, { color: 'navy', bold: true });
						previousAnswer = requiry.answer;
					}
				}
			});
			if (component.images) {
				pObj = docx.createP({ align: 'center' });

        const images = [...component.images];
        // console.log(images)

        images.forEach(async (imgObj) => {
          try {
            const original = imgObj.file_url || imgObj;
            const filename = pathHelper.getFilename(original);
            const imagePath = pathHelper.getLocalPath(task, 'images', filename);
            if (!existsSync(imagePath)) {
              console.log('!fs.existsSync(imagePath) after copying ', imagePath)
              pObj.addImage(resolve(think.ROOT_PATH + '/src/static/image', 'noimage.png'), { cx: 150, cy: 220 });
            } else {
              const link = pathHelper.getGlobalPath(task, filename);
              let size = { cx: 150, cy: 220, link };
              const compressed = await pathHelper.getThrumbnailPath(task, imagePath);
              if (existsSync(compressed)) {
                pObj.addImage(compressed, size);
              } else {
                pObj.addImage(imagePath, size);
              }
              // console.log('image added to HHS report:', {link, compressed})
            }
          } catch (e) {
            console.log('Exception on add image:', {message: e.message, imgObj});
            pObj.addImage(resolve(think.ROOT_PATH + '/src/static/image', 'noimage.png'), { cx: 150, cy: 220 });
          }
        })
			}
			pObj = docx.createP({ align: 'left' });
			const color = component.reportIssues ? 'red' : 'navy';
			pObj.addText(component.note, { color });
      var pObj = docx.createP();

      // if (component.reportIssues) {
      //   const repair = {
      //     title: 'repairs',
      //     house_id: task.house_id,
      //     timestamp: moment().unix() + 7*24*60*60,
      //     description: `HHS Issues on ${section.title}: ${component.note}`,
      //   }
      //   pathHelper.schedule(account, repair);
      // }
		});
	}

};
